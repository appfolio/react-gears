"use strict";(self.webpackChunk_appfolio_react_gears=self.webpackChunk_appfolio_react_gears||[]).push([[8879],{"./src/tooling/colors.js":function(__unused_webpack_module,exports){exports.qd=exports.Tj=exports.vx=exports._z=void 0;var colors=exports.Tj=["primary","secondary","success","danger","warning","info","ai","light","dark","white"];exports.vx=[...colors,"link"],exports._z=[...colors,"transparent"],exports.qd=[...colors,"body","muted","white","black-50","white-50"]},"./src/components/Spinner/Spinner.stories.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_tooling_colors__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/tooling/colors.js"),_Button_Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Button/Button.tsx"),_Spinner__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Spinner/Spinner.tsx");__webpack_exports__.default={title:"Spinner",component:_Spinner__WEBPACK_IMPORTED_MODULE_1__.default,parameters:{sourceLink:"Spinner/Spinner.tsx"}};const Default=({color:color,type:type,label:label,fontSize:fontSize})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",{style:{fontSize:`${fontSize}rem`}},"The ",react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Spinner__WEBPACK_IMPORTED_MODULE_1__.default,{type:type})," will scale with the font size of its container,"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement("h3",null,"...and inherit color from its container:"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Button_Button__WEBPACK_IMPORTED_MODULE_2__.default,{color:"secondary",size:"lg",className:"me-3"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Spinner__WEBPACK_IMPORTED_MODULE_1__.default,{type:type})," Loading"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Button_Button__WEBPACK_IMPORTED_MODULE_2__.default,{color:"primary",outline:!0,size:"lg"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Spinner__WEBPACK_IMPORTED_MODULE_1__.default,{type:type})," Loading")),react__WEBPACK_IMPORTED_MODULE_0__.createElement("h1",{className:`text-${color}`},"text-",color,": ",react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Spinner__WEBPACK_IMPORTED_MODULE_1__.default,{type:type,className:`text-${color}`})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr",null),react__WEBPACK_IMPORTED_MODULE_0__.createElement("h2",null,"...and accept a label prop for accessibility by screen-readers (default to 'loading'):"," "),react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",null," ",react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Spinner__WEBPACK_IMPORTED_MODULE_1__.default,{type:type,label:label})," "));Default.displayName="Default",Default.args={color:"primary",type:_Spinner__WEBPACK_IMPORTED_MODULE_1__.default.default,label:"loading",fontSize:1},Default.argTypes={color:{control:{type:"select"},options:_tooling_colors__WEBPACK_IMPORTED_MODULE_3__.qd},type:{control:{type:"select"},options:["spin","border","grow"]},fontSize:{control:{type:"range",min:1,max:5,step:.25}}};const __namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'({\n  color,\n  type,\n  label,\n  fontSize\n}) => <div>\n    <p style={{\n    fontSize: `${fontSize}rem`\n  }}>\n      The <Spinner type={type} /> will scale with the font size of its container,\n    </p>\n\n    <hr />\n    <h3>...and inherit color from its container:</h3>\n    <p>\n      <Button color="secondary" size="lg" className="me-3">\n        <Spinner type={type} /> Loading\n      </Button>\n      <Button color="primary" outline size="lg">\n        <Spinner type={type} /> Loading\n      </Button>\n    </p>\n    <h1 className={`text-${color}`}>\n      text-{color}: <Spinner type={type} className={`text-${color}`} />\n    </h1>\n\n    <hr />\n    <h2>\n      ...and accept a label prop for accessibility by screen-readers (default to\n      &apos;loading&apos;):{\' \'}\n    </h2>\n    <p>\n      {\' \'}\n      <Spinner type={type} label={label} />{\' \'}\n    </p>\n  </div>',...Default.parameters?.docs?.source}}}}}]);